Concurrency in Go

Oleg Kovalov, Spartez
10 Feb 2017

* Hello, Go

.code code/hello/hello.go

.image img/gopher_head.png

* Agenda

- Fast intro
- Bad parts[citation needed]
- Concurrency in 1 slide
- Examples

* Go in a few words

- simple
- fast
- scalable
- productive

* Why it's simple™

- sugar free WYSIWYG \ʕ◔ϖ◔ʔ/

- tiny vocabulary

- 

* Why it's fast™

- native code

- fast GC

- go fun()

- memory efficient

* Why it's scalable™

- goroutines
`Concurrency is not parallelism.` Rob Pike

- channels
`Do not communicate by sharing memory; instead share memory by communicating.` Rob Pike

- mutexes
`Channels orchestrate; mutexes serialize.` Rob Pike

* Why it's productive™

- great tools

- fast compilation

- awesome stdlib

- clean syntax

* Bad-ish™ parts ~ More is

- I heard you like exceptions
	if err != nil {
		panic("WOW DAT EROR VERY PANIC \\ʕ◔ϖ◔ʔ/")
	}

- interface{} along the way

- GOPATH

- strict compiler

- package management

- inspired by C, old ideas, no syntax sugar, too verbose and so on...

* Concurrency in 1 slide

.play code/conc/conc.go

* Examples

	func Generator(f func(int) string) <-chan string {
		i, out := 0, make(chan string)
		go func() {
			for {
				out <- f(i)
				i++
			}
		}()
		return out
	}
 
	func Broadcast(in <-chan string, out ...chan<- string) {
		for {
			value := <-in

			for _, ch := range out {
				ch <- value
			}
		}
	}

* Examples x2

	func Merge(in ...<-chan string) <-chan string {
		out := make(chan string)
		for _, ch := range in {
			go func() {
				for { out <- <-ch }
			}()
		}
		return out
	}
 
	func Merge2(in1, in2 <-chan string) <-chan string {
		out := make(chan string)
		go func() {
			for {
				select {
					case s := <-in1: out <- s
					case s := <-in2: out <- s
				}
			}
		}()
		return out
	}

* Example: message broker

.code code/message/message.go /START_DEFS/,/END_DEFS/

* Publish, Subscribe methods

.code code/message/message.go /START_PUBLISH/,/END_PUBLISH/

.code code/message/message.go /START_SUBSCRIBE/,/END_SUBSCRIBE/

* Notify subscribers

.code code/message/message.go /START_NOTIFY/,/END_NOTIFY/

* Sleep and Disconnect methods

.code code/message/message.go /START_NEWCLIENT/,/END_NEWCLIENT/

.code code/message/message.go /START_SLEEP/,/END_SLEEP/

.code code/message/message.go /START_BYE/,/END_BYE/

* Listen method

.code code/message/message.go /START_LISTEN/,/END_IMPL/

* Example: web crawler

.code code/crawler/crawler.go /START_CRAWL/,/END_CRAWL/

* Example: web crawler choked

.code code/crawler/crawler.go /START_CRAWL2/,/END_CRAWL2/

* Example: search engine

Based on a Rob's Pike presentation
[[https://talks.golang.org/2012/concurrency.slide][Go Concurrency Patterns]]

.code code/search/search.go /START_DEFS/,/END_DEFS/

.code code/search/search.go /START_IMPL/,/END_IMPL/

* Linear search

.code code/search/search.go /START_LINEAR/,/END_LINEAR/

* Concurrent search

.code code/search/search.go /START_CONC/,/END_CONC/

* Fast search

.code code/search/search.go /START_FAST/,/END_FAST/

* FirstOf search
.code code/search/search.go /START_FIRST/,/END_FIRST/

* Smart search

.code code/search/search.go /START_SMART/,/END_SMART/

No locks. No condition variables. No callbacks. Awesome.

* References

- Go tour [[https://tour.golang.org][tour.golang.org]]
- Effective Go [[https://golang.org/doc/effective_go.html][golang.org/doc/effective_go.html]]
- Go FAQ [[https://golang.org/doc/faq][golang.org/doc/faq]]
- Go by example [[https://gobyexample.com/][gobyexample.com]]
- GitHub [[https://github.com][github.com]] too much repos to list them here ¯\_(ツ)_/¯

* MEMES

.image img/golang_lel.jpg

* Questions?

.image img/gopher.gif
